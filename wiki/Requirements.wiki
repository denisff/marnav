#summary Requirements for the MarNav project.
== Computing Platform ==
 1. Linux 2.6.x running on MiniATX or other low power form factor.
 1. Power down mode required.
 1. Best if no fans were required and no rotating storage was required; however optional hard drives should be supported. 
 1. Windows XP / Mac compatibility would be nice, but if a desirable feature would be seriously compromised in Windows then that feature simply won't be supported in a Windows version of the software, if and when a Windows version might be created.
 1. Windows support via [http://www.colinux.org/ coLinux] is fine.
 1. Multiple screens should be accommodated; support for at least two SVGA and/or DVI monitors.
 1. Appliance-like instant on/off capability would be very desirable (such as provided by [http://en.wikipedia.org/wiki/LinuxBIOS LinuxBIOS] or [http://en.wikipedia.org/wiki/Splashtop Splashtop] now common to all [http://www.vnunet.com/vnunet/news/2216838/asus-offer-linux-motherboards Asus motherboards].)
 1. A 2GB flash drive could store dynamic data such a routes, tracks and waypoints.
 1. Wireless support
 1. USB support (4 ports @ 500mW desired, but at least 1 port required.)
 1. CAN / NMEA 2000 support
 1. Ethernet support (GB Ethernet desirable but not required.)
 1. DVD support required (but can be temporarily connected via USB) in order to load charts.
 1. System and monitors must run off 12vdc and perform own power filtering.
 1. UPS support desirable, but only if a UPS running from 12vdc is found.
 1. Ability to boot into the navigation application running from flash desirable, however ability to run other applications should be retained.

== Interfaces ==
 * Selected NMEA 0183 devices
 * Selected NMEA 2000 devices
[http://gpsd.berlios.de/ gpsd] has a bad reputation.  One option is to write our own GPS code for NMEA 0183 ([http://code.google.com/p/marnav/source/browse this] is a start), but we need to support other 0183 devices and NMEA 2000 devices as well.  We should check out [http://folks.o-hand.com/iain/gypsy/ gypsy].

Like gpsd, the Gypsy daemon program is started at system boot. It connects to the D-Bus system bus and waits. When a client application tells it to connect to a GPS device it connects and parses the NMEA sentences generated by the GPS device and it emits signals onto the system bus. Applications can choose to listen to whatever signals they are interested in and ignore the rest. Gypsy emits fine grained signals over d-bus so that applications which are only interested in the location signals do not have to know about the course signals or the satellite signals, for example.

D-bus means that the applications / applets need to be on a single machine ([http://dbus.freedesktop.org/doc/dbus-faq.html#internet-communications-engine Ice] would not have this restriction.)

== GUI ==
The UI shown in the [http://www.marnav.info/blog/index.php/archives/2008/05/13/foss-navsoft-tease/ marnav.info blog] is not what I would recommend going forward... (but the glade file used to make the software shown on the blog is [http://code.google.com/p/marnav/source/browse/trunk/src/marnav.glade here], if you want to examine it) This file is shown so you can see what a complete glade file looks like.  There are references to Python callbacks in this glade file, so you won't be able to view it in a running program until the callbacks  are removed. Don't bother doing that ... this UI isn't worth fixing.

It is better to follow the UI of the Gimp, with a separate toolbox window, and separate viewport windows.  Here is the Gimp's toolbox/menu panel:

http://marnav.googlecode.com/svn/trunk/docs/images/gimp.png

The Glade designer might be used to prototype an initial UI layout.  Beware: the Glade designer is a bit temperamental, however each release is a step forward.  Implementing the entire project in C++ would make sense; I am also open to using other typed languages like Java and Scala.  Python/Jython is great for integration and scripting, and meshes with C/C++ really well.  Java 6 now contains scripting features, but GUIs built with Java all suck.  Adobe AIR makes terrific looking GUIs, but there is no way to call from ActionScript to/from another language, such as is possible with C/Python and Java with JNI.

Anyway, if we start with a 100% Glade mock up we can get an idea of what to build, and discuss the implementation language.

The next step would be to create some custom GTK components.  C++ would be best for this, I think.  The Gimp uses miniature GTK buttons - not sure how they do that.  I think the default GTK widgets are rather clunky.  It takes time to craft nice widgets, so it would make sense to examine The Gimp's custom widget code.

A major issue will be to decide on the GPS feed mechanism.  Various open source alternatives exist.  This decision should support NMEA 0183 (via serial port and USB) as well as NMEA 2000.  The high level architectural design will probably be affected by this choice.

== Charts ==
S-57 vector charts must be supported, and BSB-4 charts should be supported. The [http://home.gdal.org/projects/s57/index.html OGR] subproject of the GDAL project may be useful.

There is a BSB (RNC/KAP) reader library here:
http://home.gdal.org/projects/bsb/index.html 

NOAA's ENC (S-57) charts are here:
http://nauticalcharts.noaa.gov/mcd/enc/download.htm

[http://nauticalcharts.noaa.gov/mcd/Raster/Index.htm NOAA supports RNC/KAP charts] in S61 format, too.  We probably need to support it since it is well established in the market.

Grass will read S-52 (symbology files) and S-57 (chart data files.) The S-52 standard
contains the standardized coloring and symbology for electronic navigation charts. We want to view the S-57 data through the lens of the S-52 rules. OpenEV has a module that can do that, and it will work with Grass.
http://grass.osgeo.org/wiki/S-57_data

Grass will export any map format it can read to the (raster, natch) format needed by gpsdrive:
http://grass.osgeo.org/wiki/Export_for_GpsDrive

There is also an S57 reader in GDAL:
http://home.gdal.org/projects/s57/index.html
http://home.gdal.org/projects/iso8211/index.html

S63 maps are encrypted.
See also: http://www.s63x.org/LinkedDocuments/S-63%20extended%20Working%20Group...

Primar-Stavanger is a distributors of S-63 charts.
http://www.primar-stavanger.org/

== Features ==
See [Features].

== Test data ==
Test data should simulate real instruments.  A facility to generate test data via a simple script should be provided, and a capture / replay feature should be provided.  Test data should include NMEA 0183 sentences and NMEA 2000 PGNs for:
 * GPS
 * AIS
 * Weather
 * Radar
 * DSC

http://marnav.googlecode.com/svn/trunk/docs/images/portConfig.png

A facility to consume data from an IP address should be provided (feeds for AIS data are available on the Internet; see [http://www.marnav.info/blog/index.php/archives/2007/05/30/live-ais-data/ this blog].)

== License ==
Dual licensing makes sense; free for non-commercial use, and something else for commercial use.  An attribution style license (MIT, BSD or Apache) or LGPL seems OK for non-commercial use.

If we choice very permissive license we can't take code from other GPL projects, unless those are packaged separately (IE separately loaded dynamic library code.)